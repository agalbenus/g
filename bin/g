#!/bin/sh

# MIT License
#
# Copyright (c) 2018 Stefan Maric
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# POSIX shell doesn't support errtrace nor pipefail.

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR.
set -o nounset

# Uncomment these if you are debugging.
# set -o xtrace
# set -o verbose

#
# Options.
#

ACTIVATE=true
QUIET=false
NO_COLOR=false
NON_INTERACTIVE=false
INCLUDE_UNSTABLE=false
ARCH=
OS=

#
# Detect environment conditions.
#

if [ ! -t 1 ]; then
  NO_COLOR=true
fi

case $TERM in
  "xterm"*) ;;
  "screen"*) ;;
  *) NO_COLOR=true;;
esac

#
# Information about the tool.
#

display_g_version() {
  echo "0.4.0"
}

display_help() {
  cat <<-EOF

  Usage: g [COMMAND] [options] [args]

  Commands:

    g                           Open interactive UI with installed versions
    g install <version>         Install go <version>
    g install latest            Install or activate the latest go release
    g install -a 386 latest     Force 32 bit architecture
    g install -o darwin latest  Override operating system
    g run <version>             Run a given version of go
    g which <version>           Output bin path for <version>
    g remove <version ...>      Remove the given version(s)
    g prune                     Remove all versions except the current version
    g list                      Output installed go versions
    g list-all                  Output all available go versions
    g self-upgrade              Upgrades g to the latest version
    g help                      Display help information, same as g --help

  Options:

    -h, --help              Display help information and exit
    -v, --version           Output current version of g and exit
    -q, --quiet             Disable curl output (if available)
    -d, --download          Download only
    -c, --no-color          Force disabled color output
    -y, --non-interactive   Prevent prompts
    -o, --os                Override operating system
    -a, --arch              Override system architecture
    -u, --unstable          Include unstable versions in list

EOF
}

#
# POSIX utils.
#

# Extracted from: https://unix.stackexchange.com/a/464963
readc() { # arg: <variable-name>
  if [ -t 0 ]; then
    # if stdin is a tty device, put it out of icanon, set min and
    # time to sane value, but don't otherwise touch other input or
    # or local settings (echo, isig, icrnl...). Take a backup of the
    # previous settings beforehand.
    saved_tty_settings=$(stty -g)
    stty -icanon min 1 time 0
  fi
  eval "$1="
  while
    # read one byte, using a work around for the fact that command
    # substitution strips the last character.
    c=$(dd bs=1 count=1 2> /dev/null; echo .)
    c=${c%.}

    # break out of the loop on empty input (eof) or if a full character
    # has been accumulated in the output variable (using "wc -m" to count
    # the number of characters).
    [ -n "$c" ] &&
      eval "$1=\${$1}"'$c
        [ "$(($(printf %s "${'"$1"'}" | wc -m)))" -eq 0 ]'; do
    continue
  done
  if [ -t 0 ]; then
    # restore settings saved earlier if stdin is a tty device.
    stty "$saved_tty_settings"
  fi
}

#
# Add styles to text.
#

style_text() {
  color=$1
  # the rest of the arguments become the text.
  shift
  text=$*

  if [ ! "$NO_COLOR" = true ]; then
    printf "\\033[%sm%s\\033[0m" "$color" "$text"
  else
    printf '%s' "$text"
  fi

}

#
# Log formated info as <type> : <msg>.
#

info() {
  if [ "$QUIET" = true ]; then
    return
  fi
  printf '%22s: %s\n' "$(style_text 94 "$1")" "$(style_text 2 "$2")"
}

#
# Log the given error <msg ...>.
#

error() {
  printf '%22s: %s\n' "$(style_text 31 ERROR)" "$(style_text 31 "$*")"
}

#
# Exit with the given error <msg ...>.
#

abort() {
  echo
  error "$*"
  echo
  exit 1
}

#
# Move up a line and erase.
#

erase_line() {
  printf '\033[1A\033[2K'
}

#
# Hide cursor.
#

hide_cursor() {
  printf '\033[?25l'
}

#
# Show cursor.
#

show_cursor() {
  printf '\033[?25h'
}


#
# Functions used when showing interactive UI.
#

enter_fullscreen() {
  tput smcup
  stty -echo
}

leave_fullscreen() {
  tput rmcup
  stty echo
}

handle_sigint() {
  leave_fullscreen
  S="$?"
  kill 0
  exit $S
}

handle_sigtstp() {
  leave_fullscreen
  kill -s SIGSTOP $$
}

#
# Check if the HTTP response of <url> is OK, i.e status code is bellow 400.
#

is_url_ok() {
  cmd=

  # The --head and --spider options of curl and wget, respectively, triggers an
  # HEAD request, to prevent downloading the actual content.
  if command -v curl > /dev/null; then
    cmd="curl --silent --head"
  elif command -v wget > /dev/null; then
    cmd="wget --quiet --server-response --spider"
  else
    abort "curl or wget required"
  fi

  # wget is a bit awkward and using the --server-response option prints the info
  # to stderr (2) instead of stdout (1), so we need to place a redirect.
  http_status="$($cmd 2>&1 "$1" | head -n 1 | grep -E -o '[[:digit:]]{3}')"

  # The redirect might mask errors like no connection, so the http status will
  # be empty in some cases, breaking the arithmetic expression bellow. So handle
  # empty http_status and treat it as an error as well.
  if [ -n "$http_status" ] && [ $((http_status < 400)) -ne 0 ]; then
    return 0
  else
    return 1
  fi
}

#
# Download file with cUrl or fallback to wget.
#

download() {
  if command -v curl > /dev/null; then
    params="--location"

    if [ "$QUIET" = true ]; then
      params="$params --silent"
    else
      params="$params --progress-bar"
    fi

    # shellcheck disable=SC2086
    curl $params "$@"
  elif command -v wget > /dev/null; then
    params="--quiet -O-"

    if [ ! "$QUIET" = true ]; then
      if command wget --help 2>&1 | grep -e '--show-progress' > /dev/null; then
        params="$params --show-progress"
      fi
    fi

    # shellcheck disable=SC2086
    wget $params "$@"
  else
    abort "curl or wget required"
  fi
}

#
# Fetch download page to get all remote version.
#

get_all_remote_versions() {
  pattern=

  if [ "$INCLUDE_UNSTABLE" = true ]; then
    pattern='go[[:digit:]]+(\.[[:alnum:]]+)+\b'
  else
    pattern='go[[:digit:]]+(\.[[:digit:]]+)+\b'
  fi

  download 2> /dev/null "https://go.googlesource.com/go/+refs" \
    | grep -E -o '\"/go/\+/refs/tags/go.+?\"' \
    | grep -E -o "$pattern" \
    | tr -d 'go' \
    | sort -k 1,1n -k 2,2n -k 3,3n -t . \
    | uniq
}


#
# Display the latest release version.
#

get_latest_version() {
  get_all_remote_versions | tail -n1
}

#
# Display installed versions in descending order.
#

get_installed_versions() {
  find "$GO_VERSIONS_DIR/" -mindepth 1 -maxdepth 1 -type d \
    | sed "s|$GO_VERSIONS_DIR/||g" \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t .
}

#
# Get currently active version.
#

get_current_version() {
  if command -v go > /dev/null 2>&1; then
    current=$(go version | cut -d ' ' -f3 | tr -d 'go')
    if diff > /dev/null 2>&1 "$GO_VERSIONS_DIR/$current/bin/go" "$(command -v go)"; then
      echo "$current"
    fi
  fi
}

#
# Get version on the list after <selected>.
#

get_next_installed_version() {
  get_installed_versions | grep "$1" -A 1 | tail -n 1
}

#
# Get version on the list before <selected>.
#

get_prev_installed_version() {
  get_installed_versions | grep "$1" -B 1 | head -n 1
}


#
# Assemble the tarball url for a given <version>.
#

get_tarball_url() {
  version=$1
  platform="$(uname -a | tr '[:upper:]' '[:lower:]')"
  os=
  arch=

  case "$platform" in
    linux*) os=linux;;
    darwin*) os=darwin;;
    freebsd*) os=freebsd;;
  esac

  case "$platform" in
    *i686*|*i386*) arch=386;;
    *x86_64*) arch=amd64;;
    *armv6l*|*armv7l*) arch=armv6l;;
  esac

  if [ -n "$OS" ]; then
    os=$OS
  fi

  if [ -n "$ARCH" ]; then
    arch=$ARCH
  fi

  echo "https://dl.google.com/go/go${version}.${os}-${arch}.tar.gz"
}

#
# Display installed versions with <selected>.
#

display_installed_with_selected() {
  selected=$1
  echo
  for version in $(get_installed_versions); do
    if [ "$version" = "$selected" ]; then
      printf '  %s %s \n' "$(style_text 94 ">")" "$version"
    else
      printf '    %s \n' "$(style_text 2 "$version")"
    fi
  done
  echo
}

#
# Display the versions available.
#

display_remote_versions() {
  active=$(get_current_version)
  versions=$(get_all_remote_versions)

  echo
  for v in $versions; do
    if [ "$active" = "$v" ]; then
      printf '  %s %s \n' "$(style_text 94 ">")" "$v"
    else
      if [ -d "$GO_VERSIONS_DIR/$v" ]; then
        printf '    %s \n' "$v"
      else
        printf '    %s \n' "$(style_text 2 "$v")"
      fi
    fi
  done
  echo
}

#
# Display current go version and others installed.
#

open_interactive_ui() {
  if [ "$NON_INTERACTIVE" = true ]; then
    abort "cannot run interactive UI in non-interactive shell"
  fi

  enter_fullscreen
  clear

  active=$(get_current_version)
  selected=$active

  display_installed_with_selected "$selected"

  trap handle_sigint INT
  trap handle_sigtstp TSTP

  ESCAPE_SEQ=$(printf '\033')
  UP=$(printf 'A')
  DOWN=$(printf 'B')

  key=
  arrow=
  tmp=

  while true; do
    readc key
    case "$key" in
      "$ESCAPE_SEQ")
        # Handle ESC sequences followed by other characters, i.e. arrow keys.
        readc tmp
        if  [ "$tmp" = "[" ]; then
          readc arrow
          case $arrow in
            "$UP")
              clear
              selected=$(get_prev_installed_version "$selected")
              display_installed_with_selected "$selected"
            ;;
            "$DOWN")
              clear
              selected=$(get_next_installed_version "$selected")
              display_installed_with_selected "$selected"
            ;;
          esac
        fi
      ;;
      "k")
        clear
        selected=$(get_prev_installed_version "$selected")
        display_installed_with_selected "$selected"
      ;;
      "j")
        clear
        selected=$(get_next_installed_version "$selected")
        display_installed_with_selected "$selected"
      ;;
      "q")
        clear
        leave_fullscreen
        exit
      ;;
      *)
        # If the user hit the ENTER key, the variable includes a new line.
        if [ "$(echo "$key" | wc -l)" -gt 1 ]; then
          activate "$selected"
          leave_fullscreen
          go version
          exit
        fi
      ;;
    esac
  done
}

#
# Activate <version>
#

activate() {
  version=$1
  active=$(get_current_version)
  dir="$GO_VERSIONS_DIR/$version"

  if [ "$version" != "$active" ]; then
    if [ ! -e "$dir/g.lock" ]; then
      for file in "$dir/"*; do
        rm -rf "${GOROOT:?}/$(basename "$file")"
        cp -Rf "$file" "$GOROOT/$(basename "$file")"
      done

      ln -sf "$GOROOT/bin/"* "$GOPATH/bin/"
    else
      abort "version $version installation might be corrupted"
    fi
  fi
}

#
# Install <version>.
#

install() {
  version=$1

  if [ "$version" = "latest" ]; then
    version=$(get_latest_version)
  fi

  dir="$GO_VERSIONS_DIR/$version"

  if [ -d "$dir" ]; then
    if [ "$ACTIVATE" = true ]; then
      activate "$version"
    fi
    exit
  fi

  echo
  info "installing" "$version"

  url=$(get_tarball_url "$version")

  if ! is_url_ok "$url"; then
    abort "invalid version $version"
  fi

  info "location" "$dir"

  if mkdir -p "$dir"; then
    touch "$dir/g.lock"
  else
    abort "cannot create $dir"
  fi

  cd "$dir" || abort "cannot cd into $dir"

  info "downloading" "$url"

  download "$url" | tar -zx --strip-components=1

  [ $QUIET = false ] && erase_line

  rm -f "$dir/g.lock"

  if [ "$ACTIVATE" = true ]; then
    activate "$version"
    info "installed" "$(go version)"
  fi
  echo
}

#
# Remove <version ...>.
#

remove_versions() {
  if [ -z "$1" ]; then
    abort "version(s) required"
  fi

  active=$(get_current_version)

  while test $# -ne 0; do
    version=$1
    [ "$version" = "$active" ] && abort "cannot remove currently active version ($active)"
    info "remove" "$version"
    rm -rf "${GO_VERSIONS_DIR:?}/$version"
    shift
  done
}

#
# Prune non-active versions.
#

prune_versions() {
  active=$(get_current_version)

  for version in $(get_installed_versions); do
    if [ "$version" != "$active" ]; then
      remove_versions "$version"
    fi
  done
}

#
# Output bin path for <version>.
#

display_bin_path_for_version() {
  if [ -z "$1" ]; then
    abort "version required"
  fi

  version=$1

  if [ "$version" = "latest" ]; then
    version=$(get_latest_version)
  fi

  bin="$GO_VERSIONS_DIR/$version/bin/go"

  if [ -f "$bin" ]; then
    echo "$bin"
  else
    abort "$version is not installed"
  fi
}

#
# Execute the given <version> of go with [args ...].
#

run_with_version() {
  if [ -z "$1" ]; then
    abort "version required"
  fi

  version=$1
  response=

  if [ "$version" = "latest" ]; then
    version=$(get_latest_version)
  fi

  root="$GO_VERSIONS_DIR/$version"
  bin="$root/bin/go"

  shift # remove version

  if [ ! -x "$bin" ]; then
    echo

    if [ "$NON_INTERACTIVE" = true ]; then
      ACTIVATE=false
      install "$version"
    else
      # Wrap it in printf to remove info's default line ending
      printf "%s" "$(info "info" "$version is not installed, install it now? [y/N] ")"
      readc response

      if [ "$response" = "y" ]; then
        ACTIVATE=false
        install "$version"
      else
        abort "$version is not installed"
      fi
    fi
  fi

  GOROOT=$root exec "$bin" "$@"
}

self_upgrade() {
  if command -v curl > /dev/null; then
    curl -sSL https://git.io/g-install | bash -s -- -y
  elif command -v wget > /dev/null; then
    wget -qO- https://git.io/g-install | bash -s -- -y
  else
    abort "curl or wget required"
  fi
}

#
# Make sure required go env vars are available.
#

if [ -z "${GOPATH:-}" ] || [ -z "${GOROOT:-}" ]; then
  error "\$GOPATH and \$GOROOT environment variables are required."
  display_help
  exit 1
fi

BIN_DIR="$GOPATH/bin"

if [ "${PATH##*$BIN_DIR*}" == "$PATH" ]; then
  error "\$GOPATH/bin not found in \$PATH and it is required."
  display_help
  exit 1
fi

#
# Create bin dir inside GOPATH if it doesn't exists yet
#

if [ ! -d "$BIN_DIR" ]; then
  mkdir -p "$BIN_DIR"
fi

#
# create versions dir if it doesn't exist yet.
#

GO_VERSIONS_DIR=${GO_VERSIONS_DIR:-$GOROOT/.versions}

if [ ! -d "$GO_VERSIONS_DIR" ]; then
  mkdir -p "$GO_VERSIONS_DIR"
fi

#
# Handle arguments.
#

__cmd=
__cmd_args=""

if [ $# -eq 0 ]; then
  if [ -z "$(get_installed_versions)" ]; then
    error "no versions installed yet"
    display_help
    exit 1
  fi

  open_interactive_ui
else
  while test $# -ne 0; do
    case $1 in
      install|run|remove|prune|which|list|list-all|self-upgrade) __cmd=$1;;
      -h|--help|help) display_help; exit;;
      -v|--version) display_g_version; exit;;
      -d|--download) ACTIVATE=false;;
      -q|--quiet) QUIET=true;;
      -c|--no-color) NO_COLOR=true;;
      -y|--non-interactive) NON_INTERACTIVE=true;;
      -o|--os) shift; OS=$1;;
      -a|--arch) shift; ARCH=$1;;
      -u|--unstable) INCLUDE_UNSTABLE=true;;
      --) __cmd_args="$__cmd_args $*"; break;;
      *) __cmd_args="$__cmd_args $1";;
    esac
    shift
  done

  # The unquoted expansions here are intentional.
  # shellcheck disable=SC2086
  case $__cmd in
    install) install $__cmd_args;;
    run) run_with_version $__cmd_args;;
    remove) remove_versions $__cmd_args;;
    prune) prune_versions;;
    which) display_bin_path_for_version $__cmd_args;;
    list) display_installed_with_selected "$(get_current_version)";;
    list-all) display_remote_versions;;
    self-upgrade) self_upgrade;;
    *) error "Invalid command $__cmd"; display_help; exit 1;;
  esac
fi
