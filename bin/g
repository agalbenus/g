#!/usr/bin/env bash

# MIT License
#
# Copyright (c) 2018 Stefan Maric
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Catch errors in pipes.
set -o pipefail
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR.
set -o nounset

#
# Options.
#

ACTIVATE=true
QUIET=false
NO_COLOR=false
NON_INTERACTIVE=false
ARCH=
OS=

#
# Detect environment conditions.
#

if [[ ! -t 1 || ("${TERM:-}" != "xterm"* && "${TERM:-}" != "screen"*) ]]; then
  NO_COLOR=true
fi

#
# Information about the tool.
#

display_g_version() {
  echo "0.2.0"
}

display_help() {
  cat <<-EOF

  Usage: g [COMMAND] [options] [args]

  Commands:

    g                           Open interactive UI with installed versions
    g install <version>         Install go <version>
    g install latest            Install or activate the latest go release
    g install -a 386 latest     Force 32 bit architecture
    g install -o darwin latest  Override operating system
    g run <version>             Run a given version of go
    g which <version>           Output bin path for <version>
    g remove <version ...>      Remove the given version(s)
    g prune                     Remove all versions except the current version
    g list                      Output installed go versions
    g list-all                  Output all available go versions
    g help                      Display help information, same as g --help

  Options:

    -h, --help              Display help information and exit
    -v, --version           Output current version of g and exit
    -q, --quiet             Disable curl output (if available)
    -d, --download          Download only
    -c, --no-color          Force disabled color output
    -y, --non-interactive   Prevent prompts
    -o, --os                Override operating system
    -a, --arch              Override system architecture

EOF
}


#
# Add styles to text.
#

style_text() {
  local color=$1
  # the rest of the arguments become the text.
  shift
  local text=$*

  if [[ ! "$NO_COLOR" = true ]]; then
    printf "\\033[%sm%s\\033[0m" "$color" "$text"
  else
    printf '%s' "$text"
  fi

}

#
# Log formated info as <type> : <msg>.
#

info() {
  printf '%20s : %s\n' "$(style_text 94 "$1")" "$(style_text 2 "$2")"
}

#
# Log the given error <msg ...>.
#

error() {
  printf '\n  %s\n\n' "$(style_text 31 "Error: $*")"
}

#
# Exit with the given error <msg ...>.
#

abort() {
  error "$*" && exit 1
}

#
# Move up a line and erase.
#

erase_line() {
  printf '\033[1A\033[2K'
}

#
# Hide cursor.
#

hide_cursor() {
  printf '\033[?25l'
}

#
# Show cursor.
#

show_cursor() {
  printf '\033[?25h'
}


#
# Functions used when showing interactive UI.
#

enter_fullscreen() {
  tput smcup
  stty -echo
}

leave_fullscreen() {
  tput rmcup
  stty echo
}

handle_sigint() {
  leave_fullscreen
  S="$?"
  kill 0
  exit $S
}

handle_sigtstp() {
  leave_fullscreen
  kill -s SIGSTOP $$
}

#
# Check if the HTTP response of <url> is OK, i.e status code is bellow 400.
#

is_url_ok() {
  local cmd

  # The --head and --spider options of curl and wget, respectively, triggers and
  # HEAD request, to prevent downloading the actual content.
  if command -v curl > /dev/null; then
    cmd="curl --silent --head"
  elif command -v wget > /dev/null; then
    cmd="wget --quiet --server-response --spider"
  else
    abort "curl or wget required"
  fi

  # wget is a bit awkward and using the --server-response option prints the info
  # to stderr (2) instead of stdout (1), so we need to place a redirect.
  local http_status="$($cmd 2>&1 $1 | head -n 1 | grep -E -o '[[:digit:]]{3}')"

  # The redirect might mask errors like no connection, so the http status will
  # be empty in some cases, breaking the arithmetic expression bellow. So handle
  # empty http_status and treat it as an error as well.
  if [[ -n "$http_status" ]] && (( "$http_status" < 400 )); then
    return 0
  else
    return 1
  fi
}

#
# Download file with cUrl or fallback to wget.
#

download() {
  if command -v curl > /dev/null; then
    local params=(--location)

    if [[ "$QUIET" = true ]]; then
      params+=(--silent)
    else
      params+=(--progress-bar)
    fi

    curl "${params[@]}" "$@"
  elif command -v wget > /dev/null; then
    local params=(--quiet -O-)

    if [[ ! "$QUIET" = true ]]; then
      params+=(--show-progress)
    fi

    wget "${params[@]}" "$@"
  else
    abort "curl or wget required"
  fi
}

#
# Fetch download page to get all remote version.
#

get_all_remote_versions() {
  download 2> /dev/null "https://golang.org/dl/" \
    | grep -E -o '\"https://dl.google.com/go/go.*\.tar\.gz\"' \
    | grep -E -o 'go[0-9]+\.[0-9]+(\.[0-9]+)?' \
    | tr -d 'go' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t .
}


#
# Display the latest release version.
#

get_latest_version() {
  get_all_remote_versions | tail -n1
}

#
# Display installed versions in descending order.
#

get_installed_versions() {
  find "$GO_VERSIONS_DIR/" -mindepth 1 -maxdepth 1 -type d \
    | sed "s|$GO_VERSIONS_DIR/||g" \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t .
}

#
# Get currently active version.
#

get_current_version() {
  if command -v go &> /dev/null; then
    local current=$(go version | grep -E -o '[0-9]+\.[0-9]+(\.[0-9]+)?')
    if diff &> /dev/null "$GO_VERSIONS_DIR/$current/bin/go" "$(command -v go)"; then
      echo "$current"
    fi
  fi
}

#
# Get version on the list after <selected>.
#

get_next_installed_version() {
  get_installed_versions | grep "$1" -A 1 | tail -n 1
}

#
# Get version on the list before <selected>.
#

get_prev_installed_version() {
  get_installed_versions | grep "$1" -B 1 | head -n 1
}


#
# Assemble the tarball url for a given <version>.
#

get_tarball_url() {
  local version=$1
  local platform="$(uname -a | tr '[:upper:]' '[:lower:]')"
  local os=
  local arch=

  case "$platform" in
    linux*) os=linux;;
    darwin*) os=darwin;;
    freebsd*) os=freebsd;;
  esac

  case "$platform" in
    *i686*|*i386*) arch=386;;
    *x86_64*) arch=amd64;;
    *armv6l*|*armv7l*) arch=armv6l;;
  esac

  if [[ ! -z "$OS" ]]; then
    os=$OS
  fi

  if [[ ! -z "$ARCH" ]]; then
    arch=$ARCH
  fi

  echo "https://dl.google.com/go/go${version}.${os}-${arch}.tar.gz"
}

#
# Display installed versions with <selected>.
#

display_installed_with_selected() {
  selected=$1
  echo
  for version in $(get_installed_versions); do
    if [[ "$version" = "$selected" ]]; then
      printf '  %s %s \n' "$(style_text 94 ">")" "$version"
    else
      printf '    %s \n' "$(style_text 2 "$version")"
    fi
  done
  echo
}

#
# Display the versions available.
#

display_remote_versions() {
  local active=$(get_current_version)
  local versions=$(get_all_remote_versions)

  echo
  for v in $versions; do
    if [[ "$active" = "$v" ]]; then
      printf '  %s %s \n' "$(style_text 94 ">")" "$v"
    else
      if [[ -d "$GO_VERSIONS_DIR/$v" ]]; then
        printf '    %s \n' "$v"
      else
        printf '    %s \n' "$(style_text 2 "$v")"
      fi
    fi
  done
  echo
}

#
# Display current go version and others installed.
#

open_interactive_ui() {
  if [[ "$NON_INTERACTIVE" = true ]]; then
    abort "Cannot run interactive UI in non-interactive shell"
  fi

  enter_fullscreen
  clear

  local active=$(get_current_version)
  local selected=$active

  display_installed_with_selected "$selected"

  trap handle_sigint INT
  trap handle_sigtstp SIGTSTP

  local ESCAPE_SEQ=$'\033'
  local UP=$'A'
  local DOWN=$'B'

  while true; do
    read -rsn 1 key
    case "$key" in
      $ESCAPE_SEQ)
        # Handle ESC sequences followed by other characters, i.e. arrow keys.
        read -rsn 1 -t 1 tmp
        if  [[ "$tmp" == "[" ]]; then
          read -rsn 1 -t 1 arrow
          case "$arrow" in
            $UP)
              clear
              selected=$(get_prev_installed_version "$selected")
              display_installed_with_selected "$selected"
            ;;
            $DOWN)
              clear
              selected=$(get_next_installed_version "$selected")
              display_installed_with_selected "$selected"
            ;;
          esac
        fi
      ;;
      "k")
        clear
        selected=$(get_prev_installed_version "$selected")
        display_installed_with_selected "$selected"
      ;;
      "j")
        clear
        selected=$(get_next_installed_version "$selected")
        display_installed_with_selected "$selected"
      ;;
      "q")
        clear
        leave_fullscreen
        exit
      ;;
      "")
        # enter key returns empty string.
        activate "$selected"
        leave_fullscreen
        go version
        exit
      ;;
    esac
  done
}

#
# Activate <version>
#

activate() {
  local version=$1
  local active=$(get_current_version)
  local dir="$GO_VERSIONS_DIR/$version"

  if [[ "$version" != "$active" ]]; then
    if [[ ! -e $dir/g.lock ]]; then
      for file in "$dir/"*; do
        rm -rf "${GOROOT:?}/$(basename "$file")"
        cp -Rf "$file" "$GOROOT/$(basename "$file")"
      done

      ln -sf "$GOROOT/bin/"* "$GOPATH/bin/"
    else
      abort "Version ${version} installation might be corrupted"
    fi
  fi
}

#
# Install <version>.
#

install() {
  local version=$1

  if [[ "$version" = "latest" ]]; then
    version=$(get_latest_version)
  fi

  local dir=$GO_VERSIONS_DIR/$version

  if [[ -d "$dir" ]]; then
    if [[ "$ACTIVATE" = true ]]; then
      activate "$version"
    fi
    exit
  fi

  echo
  info install "$version"

  local url=$(get_tarball_url "$version")

  if ! is_url_ok "$url"; then
    abort "invalid version $version"
  fi

  info mkdir "$dir"

  if mkdir -p "$dir"; then
    touch "$dir/g.lock"
  else
    abort "cannot create $dir"
  fi

  cd "$dir" || abort "cannot cd into $dir"

  info fetch "$url"

  download "$url" | tar -zx --strip-components=1

  [ $QUIET == false ] && erase_line

  rm -f "$dir/g.lock"

  if $ACTIVATE; then
    activate "$version"
    info installed "$(go version)"
  fi
  echo
}

#
# Remove <version ...>.
#

remove_versions() {
  if [[ -z "$1" ]]; then
    abort "version(s) required"
  fi

  local active=$(get_current_version)

  while test $# -ne 0; do
    local version=$1
    [ "$version" == "$active" ] && abort "cannot remove currently active version ($active)"
    info remove "$version"
    rm -rf "${GO_VERSIONS_DIR:?}/$version"
    shift
  done
}

#
# Prune non-active versions.
#

prune_versions() {
  local active=$(get_current_version)

  for version in $(get_installed_versions); do
    if [[ "$version" != "$active" ]]; then
      remove_versions "$version"
    fi
  done
}

#
# Output bin path for <version>.
#

display_bin_path_for_version() {
  if [[ -z "$1" ]]; then
    abort "version required"
  fi

  local version=$1

  if [[ "$version" = "latest" ]]; then
    version=$(get_latest_version)
  fi

  local bin=$GO_VERSIONS_DIR/$version/bin/go

  if [[ -f "$bin" ]]; then
    echo "$bin"
  else
    abort "$version is not installed"
  fi
}

#
# Execute the given <version> of go with [args ...].
#

run_with_version() {
  if [[ -z "$1" ]]; then
    abort "version required"
  fi

  local version=$1

  if [[ "$version" = "latest" ]]; then
    version=$(get_latest_version)
  fi

  local root=$GO_VERSIONS_DIR/$version
  local bin=$root/bin/go

  shift # remove version

  if [[ -f "$bin" ]]; then
    GOROOT=$root exec "$bin" "$@"
  else
    abort "$version is not installed"
  fi
}

#
# Make sure required go env vars are available.
#

if [[ -z "${GOPATH:-}" || -z "${GOROOT:-}" ]]; then
  error "\$GOPATH and \$GOROOT environment variables are required."
  display_help
  exit 1
fi

#
# create versions dir if it doesn't exist yet.
#

GO_VERSIONS_DIR=${GO_VERSIONS_DIR:-$GOROOT/.versions}

if [[ ! -d "$GO_VERSIONS_DIR" ]]; then
  mkdir -p "$GO_VERSIONS_DIR"
fi

#
# Handle arguments.
#

__cmd=
__cmd_args=()

if [[ $# -eq 0 ]]; then
  if [[ -z "$(get_installed_versions)" ]]; then
    error "no versions installed yet"
    display_help
    exit 1
  fi

  open_interactive_ui
else
  while test $# -ne 0; do
    case $1 in
      install|run|remove|prune|which|list|list-all) __cmd=$1;;
      -h|--help|help) display_help; exit;;
      -v|--version) display_g_version; exit;;
      -d|--download) ACTIVATE=false;;
      -q|--quiet) QUIET=true;;
      -c|--no-color) NO_COLOR=true;;
      -y|--non-interactive) NON_INTERACTIVE=true;;
      -o|--os) shift; OS=$1;;
      -a|--arch) shift; ARCH=$1;;
      *) __cmd_args+=("$1");;
    esac
    shift
  done

  case $__cmd in
    install) install "${__cmd_args[@]}";;
    run) run_with_version "${__cmd_args[@]}";;
    remove) remove_versions "${__cmd_args[@]}";;
    prune) prune_versions;;
    which) display_bin_path_for_version "${__cmd_args[@]}";;
    list) display_installed_with_selected "$(get_current_version)";;
    list-all) display_remote_versions;;
    *) error "Invalid command $__cmd"; display_help; exit 1;;
  esac
fi
